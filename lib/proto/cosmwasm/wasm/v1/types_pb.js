// source: cosmwasm/wasm/v1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var cosmos_proto_cosmos_pb = require('../../../cosmos_proto/cosmos_pb.js');
goog.object.extend(proto, cosmos_proto_cosmos_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.cosmwasm.wasm.v1.AbsoluteTxPosition', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.AccessConfig', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.AccessType', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.AccessTypeParam', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.CodeInfo', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.ContractInfo', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.Model', null, global);
goog.exportSymbol('proto.cosmwasm.wasm.v1.Params', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.AccessTypeParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.AccessTypeParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.AccessTypeParam.displayName = 'proto.cosmwasm.wasm.v1.AccessTypeParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.AccessConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.AccessConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.AccessConfig.displayName = 'proto.cosmwasm.wasm.v1.AccessConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.Params.displayName = 'proto.cosmwasm.wasm.v1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.CodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.CodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.CodeInfo.displayName = 'proto.cosmwasm.wasm.v1.CodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.ContractInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.ContractInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.ContractInfo.displayName = 'proto.cosmwasm.wasm.v1.ContractInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.displayName = 'proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.AbsoluteTxPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.AbsoluteTxPosition.displayName = 'proto.cosmwasm.wasm.v1.AbsoluteTxPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmwasm.wasm.v1.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmwasm.wasm.v1.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmwasm.wasm.v1.Model.displayName = 'proto.cosmwasm.wasm.v1.Model';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.AccessTypeParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.AccessTypeParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.AccessTypeParam}
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.AccessTypeParam;
  return proto.cosmwasm.wasm.v1.AccessTypeParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.AccessTypeParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.AccessTypeParam}
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.AccessTypeParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.AccessTypeParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional AccessType value = 1;
 * @return {!proto.cosmwasm.wasm.v1.AccessType}
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.prototype.getValue = function() {
  return /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cosmwasm.wasm.v1.AccessType} value
 * @return {!proto.cosmwasm.wasm.v1.AccessTypeParam} returns this
 */
proto.cosmwasm.wasm.v1.AccessTypeParam.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.AccessConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.AccessConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AccessConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    permission: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.AccessConfig}
 */
proto.cosmwasm.wasm.v1.AccessConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.AccessConfig;
  return proto.cosmwasm.wasm.v1.AccessConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.AccessConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.AccessConfig}
 */
proto.cosmwasm.wasm.v1.AccessConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (reader.readEnum());
      msg.setPermission(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.AccessConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.AccessConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AccessConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermission();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional AccessType permission = 1;
 * @return {!proto.cosmwasm.wasm.v1.AccessType}
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.getPermission = function() {
  return /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cosmwasm.wasm.v1.AccessType} value
 * @return {!proto.cosmwasm.wasm.v1.AccessConfig} returns this
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.setPermission = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.AccessConfig} returns this
 */
proto.cosmwasm.wasm.v1.AccessConfig.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeUploadAccess: (f = msg.getCodeUploadAccess()) && proto.cosmwasm.wasm.v1.AccessConfig.toObject(includeInstance, f),
    instantiateDefaultPermission: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxWasmCodeSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.Params}
 */
proto.cosmwasm.wasm.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.Params;
  return proto.cosmwasm.wasm.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.Params}
 */
proto.cosmwasm.wasm.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmwasm.wasm.v1.AccessConfig;
      reader.readMessage(value,proto.cosmwasm.wasm.v1.AccessConfig.deserializeBinaryFromReader);
      msg.setCodeUploadAccess(value);
      break;
    case 2:
      var value = /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (reader.readEnum());
      msg.setInstantiateDefaultPermission(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxWasmCodeSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeUploadAccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmwasm.wasm.v1.AccessConfig.serializeBinaryToWriter
    );
  }
  f = message.getInstantiateDefaultPermission();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMaxWasmCodeSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional AccessConfig code_upload_access = 1;
 * @return {?proto.cosmwasm.wasm.v1.AccessConfig}
 */
proto.cosmwasm.wasm.v1.Params.prototype.getCodeUploadAccess = function() {
  return /** @type{?proto.cosmwasm.wasm.v1.AccessConfig} */ (
    jspb.Message.getWrapperField(this, proto.cosmwasm.wasm.v1.AccessConfig, 1));
};


/**
 * @param {?proto.cosmwasm.wasm.v1.AccessConfig|undefined} value
 * @return {!proto.cosmwasm.wasm.v1.Params} returns this
*/
proto.cosmwasm.wasm.v1.Params.prototype.setCodeUploadAccess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmwasm.wasm.v1.Params} returns this
 */
proto.cosmwasm.wasm.v1.Params.prototype.clearCodeUploadAccess = function() {
  return this.setCodeUploadAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmwasm.wasm.v1.Params.prototype.hasCodeUploadAccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccessType instantiate_default_permission = 2;
 * @return {!proto.cosmwasm.wasm.v1.AccessType}
 */
proto.cosmwasm.wasm.v1.Params.prototype.getInstantiateDefaultPermission = function() {
  return /** @type {!proto.cosmwasm.wasm.v1.AccessType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cosmwasm.wasm.v1.AccessType} value
 * @return {!proto.cosmwasm.wasm.v1.Params} returns this
 */
proto.cosmwasm.wasm.v1.Params.prototype.setInstantiateDefaultPermission = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 max_wasm_code_size = 3;
 * @return {number}
 */
proto.cosmwasm.wasm.v1.Params.prototype.getMaxWasmCodeSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmwasm.wasm.v1.Params} returns this
 */
proto.cosmwasm.wasm.v1.Params.prototype.setMaxWasmCodeSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.CodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.CodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.CodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeHash: msg.getCodeHash_asB64(),
    creator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instantiateConfig: (f = msg.getInstantiateConfig()) && proto.cosmwasm.wasm.v1.AccessConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo}
 */
proto.cosmwasm.wasm.v1.CodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.CodeInfo;
  return proto.cosmwasm.wasm.v1.CodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.CodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo}
 */
proto.cosmwasm.wasm.v1.CodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodeHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 5:
      var value = new proto.cosmwasm.wasm.v1.AccessConfig;
      reader.readMessage(value,proto.cosmwasm.wasm.v1.AccessConfig.deserializeBinaryFromReader);
      msg.setInstantiateConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.CodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.CodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.CodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstantiateConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cosmwasm.wasm.v1.AccessConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes code_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.getCodeHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes code_hash = 1;
 * This is a type-conversion wrapper around `getCodeHash()`
 * @return {string}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.getCodeHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodeHash()));
};


/**
 * optional bytes code_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodeHash()`
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.getCodeHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodeHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo} returns this
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.setCodeHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string creator = 2;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo} returns this
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.setCreator = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AccessConfig instantiate_config = 5;
 * @return {?proto.cosmwasm.wasm.v1.AccessConfig}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.getInstantiateConfig = function() {
  return /** @type{?proto.cosmwasm.wasm.v1.AccessConfig} */ (
    jspb.Message.getWrapperField(this, proto.cosmwasm.wasm.v1.AccessConfig, 5));
};


/**
 * @param {?proto.cosmwasm.wasm.v1.AccessConfig|undefined} value
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo} returns this
*/
proto.cosmwasm.wasm.v1.CodeInfo.prototype.setInstantiateConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmwasm.wasm.v1.CodeInfo} returns this
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.clearInstantiateConfig = function() {
  return this.setInstantiateConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmwasm.wasm.v1.CodeInfo.prototype.hasInstantiateConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.ContractInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.ContractInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.ContractInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    creator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    admin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    label: jspb.Message.getFieldWithDefault(msg, 4, ""),
    created: (f = msg.getCreated()) && proto.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject(includeInstance, f),
    ibcPortId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    extension: (f = msg.getExtension$()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo}
 */
proto.cosmwasm.wasm.v1.ContractInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.ContractInfo;
  return proto.cosmwasm.wasm.v1.ContractInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.ContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo}
 */
proto.cosmwasm.wasm.v1.ContractInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 5:
      var value = new proto.cosmwasm.wasm.v1.AbsoluteTxPosition;
      reader.readMessage(value,proto.cosmwasm.wasm.v1.AbsoluteTxPosition.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIbcPortId(value);
      break;
    case 7:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setExtension$(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.ContractInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.ContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.ContractInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdmin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cosmwasm.wasm.v1.AbsoluteTxPosition.serializeBinaryToWriter
    );
  }
  f = message.getIbcPortId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getExtension$();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 code_id = 1;
 * @return {number}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getCodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setCodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string creator = 2;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setCreator = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string admin = 3;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string label = 4;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AbsoluteTxPosition created = 5;
 * @return {?proto.cosmwasm.wasm.v1.AbsoluteTxPosition}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getCreated = function() {
  return /** @type{?proto.cosmwasm.wasm.v1.AbsoluteTxPosition} */ (
    jspb.Message.getWrapperField(this, proto.cosmwasm.wasm.v1.AbsoluteTxPosition, 5));
};


/**
 * @param {?proto.cosmwasm.wasm.v1.AbsoluteTxPosition|undefined} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
*/
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setCreated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string ibc_port_id = 6;
 * @return {string}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getIbcPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setIbcPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional google.protobuf.Any extension = 7;
 * @return {?proto.google.protobuf.Any}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.getExtension$ = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 7));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
*/
proto.cosmwasm.wasm.v1.ContractInfo.prototype.setExtension$ = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmwasm.wasm.v1.ContractInfo} returns this
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.clearExtension$ = function() {
  return this.setExtension$(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmwasm.wasm.v1.ContractInfo.prototype.hasExtension$ = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    codeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updated: (f = msg.getUpdated()) && proto.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject(includeInstance, f),
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry;
  return proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCodeId(value);
      break;
    case 3:
      var value = new proto.cosmwasm.wasm.v1.AbsoluteTxPosition;
      reader.readMessage(value,proto.cosmwasm.wasm.v1.AbsoluteTxPosition.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCodeId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cosmwasm.wasm.v1.AbsoluteTxPosition.serializeBinaryToWriter
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional ContractCodeHistoryOperationType operation = 1;
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getOperation = function() {
  return /** @type {!proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType} value
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} returns this
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 code_id = 2;
 * @return {number}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getCodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} returns this
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.setCodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AbsoluteTxPosition updated = 3;
 * @return {?proto.cosmwasm.wasm.v1.AbsoluteTxPosition}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getUpdated = function() {
  return /** @type{?proto.cosmwasm.wasm.v1.AbsoluteTxPosition} */ (
    jspb.Message.getWrapperField(this, proto.cosmwasm.wasm.v1.AbsoluteTxPosition, 3));
};


/**
 * @param {?proto.cosmwasm.wasm.v1.AbsoluteTxPosition|undefined} value
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} returns this
*/
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.setUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} returns this
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.clearUpdated = function() {
  return this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes msg = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msg = 4;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry} returns this
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryEntry.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.AbsoluteTxPosition;
  return proto.cosmwasm.wasm.v1.AbsoluteTxPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.AbsoluteTxPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition} returns this
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 tx_index = 2;
 * @return {number}
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmwasm.wasm.v1.AbsoluteTxPosition} returns this
 */
proto.cosmwasm.wasm.v1.AbsoluteTxPosition.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmwasm.wasm.v1.Model.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmwasm.wasm.v1.Model.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmwasm.wasm.v1.Model} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.Model.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmwasm.wasm.v1.Model}
 */
proto.cosmwasm.wasm.v1.Model.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmwasm.wasm.v1.Model;
  return proto.cosmwasm.wasm.v1.Model.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmwasm.wasm.v1.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmwasm.wasm.v1.Model}
 */
proto.cosmwasm.wasm.v1.Model.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmwasm.wasm.v1.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmwasm.wasm.v1.Model} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmwasm.wasm.v1.Model.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmwasm.wasm.v1.Model} returns this
 */
proto.cosmwasm.wasm.v1.Model.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.cosmwasm.wasm.v1.Model.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmwasm.wasm.v1.Model} returns this
 */
proto.cosmwasm.wasm.v1.Model.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.cosmwasm.wasm.v1.AccessType = {
  ACCESS_TYPE_UNSPECIFIED: 0,
  ACCESS_TYPE_NOBODY: 1,
  ACCESS_TYPE_ONLY_ADDRESS: 2,
  ACCESS_TYPE_EVERYBODY: 3
};

/**
 * @enum {number}
 */
proto.cosmwasm.wasm.v1.ContractCodeHistoryOperationType = {
  CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED: 0,
  CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: 1,
  CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: 2,
  CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: 3
};

goog.object.extend(exports, proto.cosmwasm.wasm.v1);
