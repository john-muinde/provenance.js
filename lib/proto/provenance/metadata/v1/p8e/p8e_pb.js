// source: provenance/metadata/v1/p8e/p8e.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.provenance.metadata.v1.p8e.Condition', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ConditionSpec', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Consideration', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ConsiderationSpec', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Contract', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ContractSpec', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.DefinitionSpec', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.DefinitionSpecType', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ExecutionResult', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ExecutionResultType', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Fact', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Location', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.OutputSpec', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.PartyType', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ProposedFact', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.ProvenanceReference', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.PublicKey', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.PublicKeyCurve', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.PublicKeyType', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Recital', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Recitals', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Signature', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.SignatureSet', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.Timestamp', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.p8e.UUID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.Contract.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Contract.displayName = 'proto.provenance.metadata.v1.p8e.Contract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.DefinitionSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.DefinitionSpec.displayName = 'proto.provenance.metadata.v1.p8e.DefinitionSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Fact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Fact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Fact.displayName = 'proto.provenance.metadata.v1.p8e.Fact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Condition.displayName = 'proto.provenance.metadata.v1.p8e.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Consideration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.Consideration.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Consideration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Consideration.displayName = 'proto.provenance.metadata.v1.p8e.Consideration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ProposedFact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ProposedFact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ProposedFact.displayName = 'proto.provenance.metadata.v1.p8e.ProposedFact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ExecutionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ExecutionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ExecutionResult.displayName = 'proto.provenance.metadata.v1.p8e.ExecutionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Recitals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.Recitals.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Recitals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Recitals.displayName = 'proto.provenance.metadata.v1.p8e.Recitals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Recital = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Recital, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Recital.displayName = 'proto.provenance.metadata.v1.p8e.Recital';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Location.displayName = 'proto.provenance.metadata.v1.p8e.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ProvenanceReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ProvenanceReference.displayName = 'proto.provenance.metadata.v1.p8e.ProvenanceReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.SignatureSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.SignatureSet.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.SignatureSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.SignatureSet.displayName = 'proto.provenance.metadata.v1.p8e.SignatureSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Signature.displayName = 'proto.provenance.metadata.v1.p8e.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.displayName = 'proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.PublicKey.displayName = 'proto.provenance.metadata.v1.p8e.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.UUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.UUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.UUID.displayName = 'proto.provenance.metadata.v1.p8e.UUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.Timestamp.displayName = 'proto.provenance.metadata.v1.p8e.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ContractSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.ContractSpec.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ContractSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ContractSpec.displayName = 'proto.provenance.metadata.v1.p8e.ContractSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ConditionSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.ConditionSpec.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ConditionSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ConditionSpec.displayName = 'proto.provenance.metadata.v1.p8e.ConditionSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.p8e.ConsiderationSpec.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.ConsiderationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.ConsiderationSpec.displayName = 'proto.provenance.metadata.v1.p8e.ConsiderationSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.p8e.OutputSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.p8e.OutputSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.p8e.OutputSpec.displayName = 'proto.provenance.metadata.v1.p8e.OutputSpec';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.Contract.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    definition: (f = msg.getDefinition()) && proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && proto.provenance.metadata.v1.p8e.Fact.toObject(includeInstance, f),
    invoker: (f = msg.getInvoker()) && proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.toObject(includeInstance, f),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.provenance.metadata.v1.p8e.Fact.toObject, includeInstance),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.provenance.metadata.v1.p8e.Condition.toObject, includeInstance),
    considerationsList: jspb.Message.toObjectList(msg.getConsiderationsList(),
    proto.provenance.metadata.v1.p8e.Consideration.toObject, includeInstance),
    recitalsList: jspb.Message.toObjectList(msg.getRecitalsList(),
    proto.provenance.metadata.v1.p8e.Recital.toObject, includeInstance),
    timesExecuted: jspb.Message.getFieldWithDefault(msg, 8, 0),
    startTime: (f = msg.getStartTime()) && proto.provenance.metadata.v1.p8e.Timestamp.toObject(includeInstance, f),
    context: msg.getContext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Contract}
 */
proto.provenance.metadata.v1.p8e.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Contract;
  return proto.provenance.metadata.v1.p8e.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Contract}
 */
proto.provenance.metadata.v1.p8e.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.setDefinition(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.Fact;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Fact.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinaryFromReader);
      msg.setInvoker(value);
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.p8e.Fact;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Fact.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 5:
      var value = new proto.provenance.metadata.v1.p8e.Condition;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 6:
      var value = new proto.provenance.metadata.v1.p8e.Consideration;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Consideration.deserializeBinaryFromReader);
      msg.addConsiderations(value);
      break;
    case 7:
      var value = new proto.provenance.metadata.v1.p8e.Recital;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Recital.deserializeBinaryFromReader);
      msg.addRecitals(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimesExecuted(value);
      break;
    case 9:
      var value = new proto.provenance.metadata.v1.p8e.Timestamp;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.Fact.serializeBinaryToWriter
    );
  }
  f = message.getInvoker();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.provenance.metadata.v1.p8e.Fact.serializeBinaryToWriter
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.provenance.metadata.v1.p8e.Condition.serializeBinaryToWriter
    );
  }
  f = message.getConsiderationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.provenance.metadata.v1.p8e.Consideration.serializeBinaryToWriter
    );
  }
  f = message.getRecitalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.provenance.metadata.v1.p8e.Recital.serializeBinaryToWriter
    );
  }
  f = message.getTimesExecuted();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.provenance.metadata.v1.p8e.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getContext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional DefinitionSpec definition = 1;
 * @return {?proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getDefinition = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.DefinitionSpec} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.DefinitionSpec|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearDefinition = function() {
  return this.setDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.hasDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Fact spec = 2;
 * @return {?proto.provenance.metadata.v1.p8e.Fact}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getSpec = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Fact} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Fact, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Fact|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SigningAndEncryptionPublicKeys invoker = 3;
 * @return {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getInvoker = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setInvoker = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearInvoker = function() {
  return this.setInvoker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.hasInvoker = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Fact inputs = 4;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Fact>}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Fact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Fact, 4));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Fact>} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Fact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Fact}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.provenance.metadata.v1.p8e.Fact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated Condition conditions = 5;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Condition>}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Condition, 5));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Condition>} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Condition}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.provenance.metadata.v1.p8e.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};


/**
 * repeated Consideration considerations = 6;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Consideration>}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getConsiderationsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Consideration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Consideration, 6));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Consideration>} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setConsiderationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Consideration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Consideration}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.addConsiderations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.provenance.metadata.v1.p8e.Consideration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearConsiderationsList = function() {
  return this.setConsiderationsList([]);
};


/**
 * repeated Recital recitals = 7;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Recital>}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getRecitalsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Recital>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Recital, 7));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Recital>} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setRecitalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Recital=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Recital}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.addRecitals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.provenance.metadata.v1.p8e.Recital, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearRecitalsList = function() {
  return this.setRecitalsList([]);
};


/**
 * optional int32 times_executed = 8;
 * @return {number}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getTimesExecuted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.setTimesExecuted = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Timestamp start_time = 9;
 * @return {?proto.provenance.metadata.v1.p8e.Timestamp}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getStartTime = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Timestamp, 9));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Timestamp|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
*/
proto.provenance.metadata.v1.p8e.Contract.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes context = 10;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes context = 10;
 * This is a type-conversion wrapper around `getContext()`
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContext()));
};


/**
 * optional bytes context = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContext()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.getContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.p8e.Contract} returns this
 */
proto.provenance.metadata.v1.p8e.Contract.prototype.setContext = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resourceLocation: (f = msg.getResourceLocation()) && proto.provenance.metadata.v1.p8e.Location.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.provenance.metadata.v1.p8e.Signature.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
  return proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.Location;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Location.deserializeBinaryFromReader);
      msg.setResourceLocation(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.Signature;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.DefinitionSpecType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResourceLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.Location.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.Signature.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Location resource_location = 2;
 * @return {?proto.provenance.metadata.v1.p8e.Location}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.getResourceLocation = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Location} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Location, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Location|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
*/
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.setResourceLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.clearResourceLocation = function() {
  return this.setResourceLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.hasResourceLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature signature = 3;
 * @return {?proto.provenance.metadata.v1.p8e.Signature}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.getSignature = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Signature} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Signature, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Signature|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
*/
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DefinitionSpecType type = 4;
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpecType}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.getType = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.DefinitionSpecType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpecType} value
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.DefinitionSpec.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Fact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Fact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Fact.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataLocation: (f = msg.getDataLocation()) && proto.provenance.metadata.v1.p8e.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Fact}
 */
proto.provenance.metadata.v1.p8e.Fact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Fact;
  return proto.provenance.metadata.v1.p8e.Fact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Fact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Fact}
 */
proto.provenance.metadata.v1.p8e.Fact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.Location;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Location.deserializeBinaryFromReader);
      msg.setDataLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Fact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Fact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Fact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Fact} returns this
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Location data_location = 2;
 * @return {?proto.provenance.metadata.v1.p8e.Location}
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.getDataLocation = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Location} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Location, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Location|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Fact} returns this
*/
proto.provenance.metadata.v1.p8e.Fact.prototype.setDataLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Fact} returns this
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.clearDataLocation = function() {
  return this.setDataLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Fact.prototype.hasDataLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    conditionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: (f = msg.getResult()) && proto.provenance.metadata.v1.p8e.ExecutionResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Condition}
 */
proto.provenance.metadata.v1.p8e.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Condition;
  return proto.provenance.metadata.v1.p8e.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Condition}
 */
proto.provenance.metadata.v1.p8e.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConditionName(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.ExecutionResult;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ExecutionResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConditionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.ExecutionResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string condition_name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.getConditionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Condition} returns this
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.setConditionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExecutionResult result = 2;
 * @return {?proto.provenance.metadata.v1.p8e.ExecutionResult}
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.getResult = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.ExecutionResult} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.ExecutionResult, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.ExecutionResult|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Condition} returns this
*/
proto.provenance.metadata.v1.p8e.Condition.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Condition} returns this
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Condition.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.Consideration.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Consideration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Consideration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Consideration.toObject = function(includeInstance, msg) {
  var f, obj = {
    considerationName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.provenance.metadata.v1.p8e.ProposedFact.toObject, includeInstance),
    result: (f = msg.getResult()) && proto.provenance.metadata.v1.p8e.ExecutionResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Consideration}
 */
proto.provenance.metadata.v1.p8e.Consideration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Consideration;
  return proto.provenance.metadata.v1.p8e.Consideration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Consideration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Consideration}
 */
proto.provenance.metadata.v1.p8e.Consideration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsiderationName(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.ProposedFact;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ProposedFact.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.ExecutionResult;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ExecutionResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Consideration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Consideration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Consideration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsiderationName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.ProposedFact.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.ExecutionResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string consideration_name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.getConsiderationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Consideration} returns this
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.setConsiderationName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ProposedFact inputs = 2;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.ProposedFact>}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.ProposedFact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.ProposedFact, 2));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.ProposedFact>} value
 * @return {!proto.provenance.metadata.v1.p8e.Consideration} returns this
*/
proto.provenance.metadata.v1.p8e.Consideration.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.ProposedFact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.provenance.metadata.v1.p8e.ProposedFact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Consideration} returns this
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional ExecutionResult result = 3;
 * @return {?proto.provenance.metadata.v1.p8e.ExecutionResult}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.getResult = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.ExecutionResult} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.ExecutionResult, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.ExecutionResult|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Consideration} returns this
*/
proto.provenance.metadata.v1.p8e.Consideration.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Consideration} returns this
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Consideration.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ProposedFact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ProposedFact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ProposedFact.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    classname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ancestor: (f = msg.getAncestor()) && proto.provenance.metadata.v1.p8e.ProvenanceReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ProposedFact;
  return proto.provenance.metadata.v1.p8e.ProposedFact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ProposedFact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.p8e.ProvenanceReference;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ProvenanceReference.deserializeBinaryFromReader);
      msg.setAncestor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ProposedFact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ProposedFact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ProposedFact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClassname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAncestor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.provenance.metadata.v1.p8e.ProvenanceReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact} returns this
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact} returns this
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string classname = 3;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact} returns this
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.setClassname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ProvenanceReference ancestor = 4;
 * @return {?proto.provenance.metadata.v1.p8e.ProvenanceReference}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.getAncestor = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.ProvenanceReference} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.ProvenanceReference, 4));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.ProvenanceReference|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact} returns this
*/
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.setAncestor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ProposedFact} returns this
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.clearAncestor = function() {
  return this.setAncestor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ProposedFact.prototype.hasAncestor = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ExecutionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ExecutionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: (f = msg.getOutput()) && proto.provenance.metadata.v1.p8e.ProposedFact.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recordedAt: (f = msg.getRecordedAt()) && proto.provenance.metadata.v1.p8e.Timestamp.toObject(includeInstance, f),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ExecutionResult;
  return proto.provenance.metadata.v1.p8e.ExecutionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ExecutionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.ProposedFact;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ProposedFact.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 2:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.ExecutionResultType} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.Timestamp;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Timestamp.deserializeBinaryFromReader);
      msg.setRecordedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ExecutionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ExecutionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.ProposedFact.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRecordedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional ProposedFact output = 1;
 * @return {?proto.provenance.metadata.v1.p8e.ProposedFact}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.getOutput = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.ProposedFact} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.ProposedFact, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.ProposedFact|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
*/
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExecutionResultType result = 2;
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResultType}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.getResult = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.ExecutionResultType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.ExecutionResultType} value
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Timestamp recorded_at = 3;
 * @return {?proto.provenance.metadata.v1.p8e.Timestamp}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.getRecordedAt = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.Timestamp, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.Timestamp|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
*/
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.setRecordedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.clearRecordedAt = function() {
  return this.setRecordedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.hasRecordedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string error_message = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ExecutionResult} returns this
 */
proto.provenance.metadata.v1.p8e.ExecutionResult.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.Recitals.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Recitals.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Recitals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Recitals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Recitals.toObject = function(includeInstance, msg) {
  var f, obj = {
    partiesList: jspb.Message.toObjectList(msg.getPartiesList(),
    proto.provenance.metadata.v1.p8e.Recital.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Recitals}
 */
proto.provenance.metadata.v1.p8e.Recitals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Recitals;
  return proto.provenance.metadata.v1.p8e.Recitals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Recitals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Recitals}
 */
proto.provenance.metadata.v1.p8e.Recitals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.Recital;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Recital.deserializeBinaryFromReader);
      msg.addParties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Recitals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Recitals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Recitals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Recitals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.Recital.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recital parties = 1;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Recital>}
 */
proto.provenance.metadata.v1.p8e.Recitals.prototype.getPartiesList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Recital>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Recital, 1));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Recital>} value
 * @return {!proto.provenance.metadata.v1.p8e.Recitals} returns this
*/
proto.provenance.metadata.v1.p8e.Recitals.prototype.setPartiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Recital=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Recital}
 */
proto.provenance.metadata.v1.p8e.Recitals.prototype.addParties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.provenance.metadata.v1.p8e.Recital, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.Recitals} returns this
 */
proto.provenance.metadata.v1.p8e.Recitals.prototype.clearPartiesList = function() {
  return this.setPartiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Recital.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Recital} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Recital.toObject = function(includeInstance, msg) {
  var f, obj = {
    signerRole: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signer: (f = msg.getSigner()) && proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.toObject(includeInstance, f),
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Recital}
 */
proto.provenance.metadata.v1.p8e.Recital.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Recital;
  return proto.provenance.metadata.v1.p8e.Recital.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Recital} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Recital}
 */
proto.provenance.metadata.v1.p8e.Recital.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.PartyType} */ (reader.readEnum());
      msg.setSignerRole(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinaryFromReader);
      msg.setSigner(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Recital.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Recital} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Recital.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignerRole();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSigner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.serializeBinaryToWriter
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional PartyType signer_role = 1;
 * @return {!proto.provenance.metadata.v1.p8e.PartyType}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.getSignerRole = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.PartyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.PartyType} value
 * @return {!proto.provenance.metadata.v1.p8e.Recital} returns this
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.setSignerRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SigningAndEncryptionPublicKeys signer = 2;
 * @return {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.getSigner = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Recital} returns this
*/
proto.provenance.metadata.v1.p8e.Recital.prototype.setSigner = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Recital} returns this
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.clearSigner = function() {
  return this.setSigner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.hasSigner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes address = 3;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.p8e.Recital} returns this
 */
proto.provenance.metadata.v1.p8e.Recital.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.provenance.metadata.v1.p8e.ProvenanceReference.toObject(includeInstance, f),
    classname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Location}
 */
proto.provenance.metadata.v1.p8e.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Location;
  return proto.provenance.metadata.v1.p8e.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Location}
 */
proto.provenance.metadata.v1.p8e.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.ProvenanceReference;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ProvenanceReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.ProvenanceReference.serializeBinaryToWriter
    );
  }
  f = message.getClassname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ProvenanceReference ref = 1;
 * @return {?proto.provenance.metadata.v1.p8e.ProvenanceReference}
 */
proto.provenance.metadata.v1.p8e.Location.prototype.getRef = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.ProvenanceReference} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.ProvenanceReference, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.ProvenanceReference|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Location} returns this
*/
proto.provenance.metadata.v1.p8e.Location.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Location} returns this
 */
proto.provenance.metadata.v1.p8e.Location.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Location.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string classname = 2;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Location.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Location} returns this
 */
proto.provenance.metadata.v1.p8e.Location.prototype.setClassname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ProvenanceReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ProvenanceReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeUuid: (f = msg.getScopeUuid()) && proto.provenance.metadata.v1.p8e.UUID.toObject(includeInstance, f),
    groupUuid: (f = msg.getGroupUuid()) && proto.provenance.metadata.v1.p8e.UUID.toObject(includeInstance, f),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ProvenanceReference;
  return proto.provenance.metadata.v1.p8e.ProvenanceReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ProvenanceReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.UUID;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.UUID.deserializeBinaryFromReader);
      msg.setScopeUuid(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.UUID;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.UUID.deserializeBinaryFromReader);
      msg.setGroupUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ProvenanceReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ProvenanceReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.UUID.serializeBinaryToWriter
    );
  }
  f = message.getGroupUuid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.UUID.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional UUID scope_uuid = 1;
 * @return {?proto.provenance.metadata.v1.p8e.UUID}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.getScopeUuid = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.UUID} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.UUID, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.UUID|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
*/
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.setScopeUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.clearScopeUuid = function() {
  return this.setScopeUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.hasScopeUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID group_uuid = 2;
 * @return {?proto.provenance.metadata.v1.p8e.UUID}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.getGroupUuid = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.UUID} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.UUID, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.UUID|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
*/
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.setGroupUuid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.clearGroupUuid = function() {
  return this.setGroupUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.hasGroupUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ProvenanceReference} returns this
 */
proto.provenance.metadata.v1.p8e.ProvenanceReference.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.SignatureSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.SignatureSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.SignatureSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.SignatureSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.provenance.metadata.v1.p8e.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.SignatureSet}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.SignatureSet;
  return proto.provenance.metadata.v1.p8e.SignatureSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.SignatureSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.SignatureSet}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.Signature;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.SignatureSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.SignatureSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.SignatureSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Signature signatures = 1;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.Signature>}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.Signature, 1));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.Signature>} value
 * @return {!proto.provenance.metadata.v1.p8e.SignatureSet} returns this
*/
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.Signature}
 */
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.provenance.metadata.v1.p8e.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.SignatureSet} returns this
 */
proto.provenance.metadata.v1.p8e.SignatureSet.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    algo: jspb.Message.getFieldWithDefault(msg, 1, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signer: (f = msg.getSigner()) && proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Signature}
 */
proto.provenance.metadata.v1.p8e.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Signature;
  return proto.provenance.metadata.v1.p8e.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Signature}
 */
proto.provenance.metadata.v1.p8e.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinaryFromReader);
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSigner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.serializeBinaryToWriter
    );
  }
};


/**
 * optional string algo = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.getAlgo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Signature} returns this
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.setAlgo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string provider = 2;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Signature} returns this
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signature = 3;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.Signature} returns this
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SigningAndEncryptionPublicKeys signer = 4;
 * @return {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.getSigner = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys, 4));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.Signature} returns this
*/
proto.provenance.metadata.v1.p8e.Signature.prototype.setSigner = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.Signature} returns this
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.clearSigner = function() {
  return this.setSigner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.Signature.prototype.hasSigner = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    signingPublicKey: (f = msg.getSigningPublicKey()) && proto.provenance.metadata.v1.p8e.PublicKey.toObject(includeInstance, f),
    encryptionPublicKey: (f = msg.getEncryptionPublicKey()) && proto.provenance.metadata.v1.p8e.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys;
  return proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.PublicKey;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.PublicKey.deserializeBinaryFromReader);
      msg.setSigningPublicKey(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.PublicKey;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.PublicKey.deserializeBinaryFromReader);
      msg.setEncryptionPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigningPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getEncryptionPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey signing_public_key = 1;
 * @return {?proto.provenance.metadata.v1.p8e.PublicKey}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.getSigningPublicKey = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.PublicKey, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.PublicKey|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} returns this
*/
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.setSigningPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} returns this
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.clearSigningPublicKey = function() {
  return this.setSigningPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.hasSigningPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicKey encryption_public_key = 2;
 * @return {?proto.provenance.metadata.v1.p8e.PublicKey}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.getEncryptionPublicKey = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.PublicKey, 2));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.PublicKey|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} returns this
*/
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.setEncryptionPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys} returns this
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.clearEncryptionPublicKey = function() {
  return this.setEncryptionPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys.prototype.hasEncryptionPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKeyBytes: msg.getPublicKeyBytes_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    curve: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.PublicKey}
 */
proto.provenance.metadata.v1.p8e.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.PublicKey;
  return proto.provenance.metadata.v1.p8e.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.PublicKey}
 */
proto.provenance.metadata.v1.p8e.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKeyBytes(value);
      break;
    case 2:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.PublicKeyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.PublicKeyCurve} */ (reader.readEnum());
      msg.setCurve(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurve();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bytes public_key_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.getPublicKeyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key_bytes = 1;
 * This is a type-conversion wrapper around `getPublicKeyBytes()`
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.getPublicKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKeyBytes()));
};


/**
 * optional bytes public_key_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKeyBytes()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.getPublicKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.p8e.PublicKey} returns this
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.setPublicKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PublicKeyType type = 2;
 * @return {!proto.provenance.metadata.v1.p8e.PublicKeyType}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.getType = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.PublicKeyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.PublicKeyType} value
 * @return {!proto.provenance.metadata.v1.p8e.PublicKey} returns this
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PublicKeyCurve curve = 3;
 * @return {!proto.provenance.metadata.v1.p8e.PublicKeyCurve}
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.getCurve = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.PublicKeyCurve} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.PublicKeyCurve} value
 * @return {!proto.provenance.metadata.v1.p8e.PublicKey} returns this
 */
proto.provenance.metadata.v1.p8e.PublicKey.prototype.setCurve = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.UUID.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.UUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.UUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.UUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.UUID}
 */
proto.provenance.metadata.v1.p8e.UUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.UUID;
  return proto.provenance.metadata.v1.p8e.UUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.UUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.UUID}
 */
proto.provenance.metadata.v1.p8e.UUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.UUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.UUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.UUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.UUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.UUID.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.UUID} returns this
 */
proto.provenance.metadata.v1.p8e.UUID.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.Timestamp}
 */
proto.provenance.metadata.v1.p8e.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.Timestamp;
  return proto.provenance.metadata.v1.p8e.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.Timestamp}
 */
proto.provenance.metadata.v1.p8e.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.p8e.Timestamp} returns this
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.p8e.Timestamp} returns this
 */
proto.provenance.metadata.v1.p8e.Timestamp.prototype.setNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.ContractSpec.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ContractSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ContractSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ContractSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    definition: (f = msg.getDefinition()) && proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject(includeInstance, f),
    inputSpecsList: jspb.Message.toObjectList(msg.getInputSpecsList(),
    proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject, includeInstance),
    partiesInvolvedList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    conditionSpecsList: jspb.Message.toObjectList(msg.getConditionSpecsList(),
    proto.provenance.metadata.v1.p8e.ConditionSpec.toObject, includeInstance),
    considerationSpecsList: jspb.Message.toObjectList(msg.getConsiderationSpecsList(),
    proto.provenance.metadata.v1.p8e.ConsiderationSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ContractSpec;
  return proto.provenance.metadata.v1.p8e.ContractSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ContractSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.setDefinition(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.addInputSpecs(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.provenance.metadata.v1.p8e.PartyType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPartiesInvolved(values[i]);
      }
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.p8e.ConditionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ConditionSpec.deserializeBinaryFromReader);
      msg.addConditionSpecs(value);
      break;
    case 5:
      var value = new proto.provenance.metadata.v1.p8e.ConsiderationSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.ConsiderationSpec.deserializeBinaryFromReader);
      msg.addConsiderationSpecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ContractSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ContractSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ContractSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
  f = message.getInputSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
  f = message.getPartiesInvolvedList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getConditionSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.provenance.metadata.v1.p8e.ConditionSpec.serializeBinaryToWriter
    );
  }
  f = message.getConsiderationSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.provenance.metadata.v1.p8e.ConsiderationSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional DefinitionSpec definition = 1;
 * @return {?proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.getDefinition = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.DefinitionSpec} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.DefinitionSpec|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.setDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.clearDefinition = function() {
  return this.setDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.hasDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated DefinitionSpec input_specs = 2;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.getInputSpecsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 2));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} value
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.setInputSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.addInputSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.provenance.metadata.v1.p8e.DefinitionSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.clearInputSpecsList = function() {
  return this.setInputSpecsList([]);
};


/**
 * repeated PartyType parties_involved = 3;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.PartyType>}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.getPartiesInvolvedList = function() {
  return /** @type {!Array<!proto.provenance.metadata.v1.p8e.PartyType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.PartyType>} value
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.setPartiesInvolvedList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.PartyType} value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.addPartiesInvolved = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.clearPartiesInvolvedList = function() {
  return this.setPartiesInvolvedList([]);
};


/**
 * repeated ConditionSpec condition_specs = 4;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.ConditionSpec>}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.getConditionSpecsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.ConditionSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.ConditionSpec, 4));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.ConditionSpec>} value
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.setConditionSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.ConditionSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.addConditionSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.provenance.metadata.v1.p8e.ConditionSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.clearConditionSpecsList = function() {
  return this.setConditionSpecsList([]);
};


/**
 * repeated ConsiderationSpec consideration_specs = 5;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.ConsiderationSpec>}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.getConsiderationSpecsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.ConsiderationSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.ConsiderationSpec, 5));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.ConsiderationSpec>} value
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.setConsiderationSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.ConsiderationSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec}
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.addConsiderationSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.provenance.metadata.v1.p8e.ConsiderationSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ContractSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ContractSpec.prototype.clearConsiderationSpecsList = function() {
  return this.setConsiderationSpecsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ConditionSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ConditionSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inputSpecsList: jspb.Message.toObjectList(msg.getInputSpecsList(),
    proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject, includeInstance),
    outputSpec: (f = msg.getOutputSpec()) && proto.provenance.metadata.v1.p8e.OutputSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ConditionSpec;
  return proto.provenance.metadata.v1.p8e.ConditionSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ConditionSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    case 2:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.addInputSpecs(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.OutputSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.OutputSpec.deserializeBinaryFromReader);
      msg.setOutputSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ConditionSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ConditionSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
  f = message.getOutputSpec();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.OutputSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string func_name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DefinitionSpec input_specs = 2;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.getInputSpecsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 2));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} value
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.setInputSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.addInputSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.provenance.metadata.v1.p8e.DefinitionSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.clearInputSpecsList = function() {
  return this.setInputSpecsList([]);
};


/**
 * optional OutputSpec output_spec = 3;
 * @return {?proto.provenance.metadata.v1.p8e.OutputSpec}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.getOutputSpec = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.OutputSpec} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.OutputSpec, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.OutputSpec|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.setOutputSpec = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ConditionSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.clearOutputSpec = function() {
  return this.setOutputSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ConditionSpec.prototype.hasOutputSpec = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.ConsiderationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsibleParty: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inputSpecsList: jspb.Message.toObjectList(msg.getInputSpecsList(),
    proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject, includeInstance),
    outputSpec: (f = msg.getOutputSpec()) && proto.provenance.metadata.v1.p8e.OutputSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.ConsiderationSpec;
  return proto.provenance.metadata.v1.p8e.ConsiderationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    case 2:
      var value = /** @type {!proto.provenance.metadata.v1.p8e.PartyType} */ (reader.readEnum());
      msg.setResponsibleParty(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.addInputSpecs(value);
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.p8e.OutputSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.OutputSpec.deserializeBinaryFromReader);
      msg.setOutputSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.ConsiderationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsibleParty();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInputSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
  f = message.getOutputSpec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.provenance.metadata.v1.p8e.OutputSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string func_name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PartyType responsible_party = 2;
 * @return {!proto.provenance.metadata.v1.p8e.PartyType}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.getResponsibleParty = function() {
  return /** @type {!proto.provenance.metadata.v1.p8e.PartyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.PartyType} value
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.setResponsibleParty = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated DefinitionSpec input_specs = 3;
 * @return {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.getInputSpecsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 3));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.p8e.DefinitionSpec>} value
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.setInputSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.provenance.metadata.v1.p8e.DefinitionSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.addInputSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.provenance.metadata.v1.p8e.DefinitionSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.clearInputSpecsList = function() {
  return this.setInputSpecsList([]);
};


/**
 * optional OutputSpec output_spec = 4;
 * @return {?proto.provenance.metadata.v1.p8e.OutputSpec}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.getOutputSpec = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.OutputSpec} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.OutputSpec, 4));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.OutputSpec|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
*/
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.setOutputSpec = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.ConsiderationSpec} returns this
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.clearOutputSpec = function() {
  return this.setOutputSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.ConsiderationSpec.prototype.hasOutputSpec = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.p8e.OutputSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.p8e.OutputSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.OutputSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.provenance.metadata.v1.p8e.DefinitionSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.p8e.OutputSpec}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.p8e.OutputSpec;
  return proto.provenance.metadata.v1.p8e.OutputSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.p8e.OutputSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.p8e.OutputSpec}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.metadata.v1.p8e.DefinitionSpec;
      reader.readMessage(value,proto.provenance.metadata.v1.p8e.DefinitionSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.p8e.OutputSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.p8e.OutputSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.p8e.OutputSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.provenance.metadata.v1.p8e.DefinitionSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional DefinitionSpec spec = 1;
 * @return {?proto.provenance.metadata.v1.p8e.DefinitionSpec}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.getSpec = function() {
  return /** @type{?proto.provenance.metadata.v1.p8e.DefinitionSpec} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.p8e.DefinitionSpec, 1));
};


/**
 * @param {?proto.provenance.metadata.v1.p8e.DefinitionSpec|undefined} value
 * @return {!proto.provenance.metadata.v1.p8e.OutputSpec} returns this
*/
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.p8e.OutputSpec} returns this
 */
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.p8e.OutputSpec.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.provenance.metadata.v1.p8e.DefinitionSpecType = {
  DEFINITION_SPEC_TYPE_UNKNOWN: 0,
  DEFINITION_SPEC_TYPE_PROPOSED: 1,
  DEFINITION_SPEC_TYPE_FACT: 2,
  DEFINITION_SPEC_TYPE_FACT_LIST: 3
};

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.p8e.PublicKeyCurve = {
  SECP256K1: 0,
  P256: 1
};

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.p8e.PublicKeyType = {
  ELLIPTIC: 0
};

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.p8e.ExecutionResultType = {
  RESULT_TYPE_UNKNOWN: 0,
  RESULT_TYPE_PASS: 1,
  RESULT_TYPE_SKIP: 2,
  RESULT_TYPE_FAIL: 3
};

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.p8e.PartyType = {
  PARTY_TYPE_UNKNOWN: 0,
  PARTY_TYPE_ORIGINATOR: 1,
  PARTY_TYPE_SERVICER: 2,
  PARTY_TYPE_INVESTOR: 3,
  PARTY_TYPE_CUSTODIAN: 4,
  PARTY_TYPE_OWNER: 5,
  PARTY_TYPE_AFFILIATE: 6,
  PARTY_TYPE_OMNIBUS: 7,
  PARTY_TYPE_PROVENANCE: 8,
  PARTY_TYPE_MARKER: 9,
  PARTY_TYPE_CONTROLLER: 10,
  PARTY_TYPE_VALIDATOR: 11
};

goog.object.extend(exports, proto.provenance.metadata.v1.p8e);
