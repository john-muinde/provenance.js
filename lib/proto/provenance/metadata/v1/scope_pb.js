// source: provenance/metadata/v1/scope.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var provenance_metadata_v1_specification_pb = require('../../../provenance/metadata/v1/specification_pb.js');
goog.object.extend(proto, provenance_metadata_v1_specification_pb);
goog.exportSymbol('proto.provenance.metadata.v1.AuditFields', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.NetAssetValue', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Party', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Process', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Process.ProcessIdCase', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Record', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.RecordInput', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.RecordInput.SourceCase', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.RecordInputStatus', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.RecordOutput', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.ResultStatus', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Scope', null, global);
goog.exportSymbol('proto.provenance.metadata.v1.Session', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.Scope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.Scope.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.Scope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.Scope.displayName = 'proto.provenance.metadata.v1.Scope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.Session.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.Session.displayName = 'proto.provenance.metadata.v1.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.metadata.v1.Record.repeatedFields_, null);
};
goog.inherits(proto.provenance.metadata.v1.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.Record.displayName = 'proto.provenance.metadata.v1.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.provenance.metadata.v1.Process.oneofGroups_);
};
goog.inherits(proto.provenance.metadata.v1.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.Process.displayName = 'proto.provenance.metadata.v1.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.RecordInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.provenance.metadata.v1.RecordInput.oneofGroups_);
};
goog.inherits(proto.provenance.metadata.v1.RecordInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.RecordInput.displayName = 'proto.provenance.metadata.v1.RecordInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.RecordOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.RecordOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.RecordOutput.displayName = 'proto.provenance.metadata.v1.RecordOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.Party = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.Party, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.Party.displayName = 'proto.provenance.metadata.v1.Party';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.AuditFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.AuditFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.AuditFields.displayName = 'proto.provenance.metadata.v1.AuditFields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.metadata.v1.NetAssetValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.metadata.v1.NetAssetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.metadata.v1.NetAssetValue.displayName = 'proto.provenance.metadata.v1.NetAssetValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.Scope.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.Scope.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.Scope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.Scope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Scope.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeId: msg.getScopeId_asB64(),
    specificationId: msg.getSpecificationId_asB64(),
    ownersList: jspb.Message.toObjectList(msg.getOwnersList(),
    proto.provenance.metadata.v1.Party.toObject, includeInstance),
    dataAccessList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    valueOwnerAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    requirePartyRollup: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.Scope}
 */
proto.provenance.metadata.v1.Scope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.Scope;
  return proto.provenance.metadata.v1.Scope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.Scope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.Scope}
 */
proto.provenance.metadata.v1.Scope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScopeId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpecificationId(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.Party;
      reader.readMessage(value,proto.provenance.metadata.v1.Party.deserializeBinaryFromReader);
      msg.addOwners(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDataAccess(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueOwnerAddress(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequirePartyRollup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Scope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.Scope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.Scope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Scope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpecificationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOwnersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.provenance.metadata.v1.Party.serializeBinaryToWriter
    );
  }
  f = message.getDataAccessList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getValueOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRequirePartyRollup();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes scope_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Scope.prototype.getScopeId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes scope_id = 1;
 * This is a type-conversion wrapper around `getScopeId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Scope.prototype.getScopeId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScopeId()));
};


/**
 * optional bytes scope_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScopeId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Scope.prototype.getScopeId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScopeId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.setScopeId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes specification_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Scope.prototype.getSpecificationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes specification_id = 2;
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Scope.prototype.getSpecificationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpecificationId()));
};


/**
 * optional bytes specification_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Scope.prototype.getSpecificationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpecificationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.setSpecificationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Party owners = 3;
 * @return {!Array<!proto.provenance.metadata.v1.Party>}
 */
proto.provenance.metadata.v1.Scope.prototype.getOwnersList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.Party>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.Party, 3));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.Party>} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
*/
proto.provenance.metadata.v1.Scope.prototype.setOwnersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.provenance.metadata.v1.Party=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.Party}
 */
proto.provenance.metadata.v1.Scope.prototype.addOwners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.provenance.metadata.v1.Party, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.clearOwnersList = function() {
  return this.setOwnersList([]);
};


/**
 * repeated string data_access = 4;
 * @return {!Array<string>}
 */
proto.provenance.metadata.v1.Scope.prototype.getDataAccessList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.setDataAccessList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.addDataAccess = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.clearDataAccessList = function() {
  return this.setDataAccessList([]);
};


/**
 * optional string value_owner_address = 5;
 * @return {string}
 */
proto.provenance.metadata.v1.Scope.prototype.getValueOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.setValueOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool require_party_rollup = 6;
 * @return {boolean}
 */
proto.provenance.metadata.v1.Scope.prototype.getRequirePartyRollup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.provenance.metadata.v1.Scope} returns this
 */
proto.provenance.metadata.v1.Scope.prototype.setRequirePartyRollup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.Session.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: msg.getSessionId_asB64(),
    specificationId: msg.getSpecificationId_asB64(),
    partiesList: jspb.Message.toObjectList(msg.getPartiesList(),
    proto.provenance.metadata.v1.Party.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    context: msg.getContext_asB64(),
    audit: (f = msg.getAudit()) && proto.provenance.metadata.v1.AuditFields.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.Session}
 */
proto.provenance.metadata.v1.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.Session;
  return proto.provenance.metadata.v1.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.Session}
 */
proto.provenance.metadata.v1.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpecificationId(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.Party;
      reader.readMessage(value,proto.provenance.metadata.v1.Party.deserializeBinaryFromReader);
      msg.addParties(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContext(value);
      break;
    case 99:
      var value = new proto.provenance.metadata.v1.AuditFields;
      reader.readMessage(value,proto.provenance.metadata.v1.AuditFields.deserializeBinaryFromReader);
      msg.setAudit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpecificationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPartiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.provenance.metadata.v1.Party.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getAudit();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      proto.provenance.metadata.v1.AuditFields.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes session_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Session.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Session.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Session.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes specification_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Session.prototype.getSpecificationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes specification_id = 2;
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Session.prototype.getSpecificationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpecificationId()));
};


/**
 * optional bytes specification_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Session.prototype.getSpecificationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpecificationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.setSpecificationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Party parties = 3;
 * @return {!Array<!proto.provenance.metadata.v1.Party>}
 */
proto.provenance.metadata.v1.Session.prototype.getPartiesList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.Party>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.Party, 3));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.Party>} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
*/
proto.provenance.metadata.v1.Session.prototype.setPartiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.provenance.metadata.v1.Party=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.Party}
 */
proto.provenance.metadata.v1.Session.prototype.addParties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.provenance.metadata.v1.Party, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.clearPartiesList = function() {
  return this.setPartiesList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.Session.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes context = 5;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Session.prototype.getContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes context = 5;
 * This is a type-conversion wrapper around `getContext()`
 * @return {string}
 */
proto.provenance.metadata.v1.Session.prototype.getContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContext()));
};


/**
 * optional bytes context = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContext()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Session.prototype.getContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.setContext = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional AuditFields audit = 99;
 * @return {?proto.provenance.metadata.v1.AuditFields}
 */
proto.provenance.metadata.v1.Session.prototype.getAudit = function() {
  return /** @type{?proto.provenance.metadata.v1.AuditFields} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.AuditFields, 99));
};


/**
 * @param {?proto.provenance.metadata.v1.AuditFields|undefined} value
 * @return {!proto.provenance.metadata.v1.Session} returns this
*/
proto.provenance.metadata.v1.Session.prototype.setAudit = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.Session} returns this
 */
proto.provenance.metadata.v1.Session.prototype.clearAudit = function() {
  return this.setAudit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.Session.prototype.hasAudit = function() {
  return jspb.Message.getField(this, 99) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.metadata.v1.Record.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: msg.getSessionId_asB64(),
    process: (f = msg.getProcess()) && proto.provenance.metadata.v1.Process.toObject(includeInstance, f),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.provenance.metadata.v1.RecordInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.provenance.metadata.v1.RecordOutput.toObject, includeInstance),
    specificationId: msg.getSpecificationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.Record}
 */
proto.provenance.metadata.v1.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.Record;
  return proto.provenance.metadata.v1.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.Record}
 */
proto.provenance.metadata.v1.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    case 3:
      var value = new proto.provenance.metadata.v1.Process;
      reader.readMessage(value,proto.provenance.metadata.v1.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 4:
      var value = new proto.provenance.metadata.v1.RecordInput;
      reader.readMessage(value,proto.provenance.metadata.v1.RecordInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 5:
      var value = new proto.provenance.metadata.v1.RecordOutput;
      reader.readMessage(value,proto.provenance.metadata.v1.RecordOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpecificationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.provenance.metadata.v1.Process.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.provenance.metadata.v1.RecordInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.provenance.metadata.v1.RecordOutput.serializeBinaryToWriter
    );
  }
  f = message.getSpecificationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.Record.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes session_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Record.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes session_id = 2;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Record.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Record.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Process process = 3;
 * @return {?proto.provenance.metadata.v1.Process}
 */
proto.provenance.metadata.v1.Record.prototype.getProcess = function() {
  return /** @type{?proto.provenance.metadata.v1.Process} */ (
    jspb.Message.getWrapperField(this, proto.provenance.metadata.v1.Process, 3));
};


/**
 * @param {?proto.provenance.metadata.v1.Process|undefined} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
*/
proto.provenance.metadata.v1.Record.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.Record.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated RecordInput inputs = 4;
 * @return {!Array<!proto.provenance.metadata.v1.RecordInput>}
 */
proto.provenance.metadata.v1.Record.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.RecordInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.RecordInput, 4));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.RecordInput>} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
*/
proto.provenance.metadata.v1.Record.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.provenance.metadata.v1.RecordInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.RecordInput}
 */
proto.provenance.metadata.v1.Record.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.provenance.metadata.v1.RecordInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated RecordOutput outputs = 5;
 * @return {!Array<!proto.provenance.metadata.v1.RecordOutput>}
 */
proto.provenance.metadata.v1.Record.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.provenance.metadata.v1.RecordOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.metadata.v1.RecordOutput, 5));
};


/**
 * @param {!Array<!proto.provenance.metadata.v1.RecordOutput>} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
*/
proto.provenance.metadata.v1.Record.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.provenance.metadata.v1.RecordOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.metadata.v1.RecordOutput}
 */
proto.provenance.metadata.v1.Record.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.provenance.metadata.v1.RecordOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional bytes specification_id = 6;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.Record.prototype.getSpecificationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes specification_id = 6;
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {string}
 */
proto.provenance.metadata.v1.Record.prototype.getSpecificationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpecificationId()));
};


/**
 * optional bytes specification_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpecificationId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Record.prototype.getSpecificationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpecificationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.Record} returns this
 */
proto.provenance.metadata.v1.Record.prototype.setSpecificationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.provenance.metadata.v1.Process.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.Process.ProcessIdCase = {
  PROCESS_ID_NOT_SET: 0,
  ADDRESS: 1,
  HASH: 2
};

/**
 * @return {proto.provenance.metadata.v1.Process.ProcessIdCase}
 */
proto.provenance.metadata.v1.Process.prototype.getProcessIdCase = function() {
  return /** @type {proto.provenance.metadata.v1.Process.ProcessIdCase} */(jspb.Message.computeOneofCase(this, proto.provenance.metadata.v1.Process.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.Process}
 */
proto.provenance.metadata.v1.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.Process;
  return proto.provenance.metadata.v1.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.Process}
 */
proto.provenance.metadata.v1.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.Process.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.setAddress = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.provenance.metadata.v1.Process.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.clearAddress = function() {
  return jspb.Message.setOneofField(this, 1, proto.provenance.metadata.v1.Process.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.Process.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.provenance.metadata.v1.Process.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.setHash = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.provenance.metadata.v1.Process.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.clearHash = function() {
  return jspb.Message.setOneofField(this, 2, proto.provenance.metadata.v1.Process.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.Process.prototype.hasHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.provenance.metadata.v1.Process.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.Process.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Process} returns this
 */
proto.provenance.metadata.v1.Process.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.provenance.metadata.v1.RecordInput.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.RecordInput.SourceCase = {
  SOURCE_NOT_SET: 0,
  RECORD_ID: 2,
  HASH: 3
};

/**
 * @return {proto.provenance.metadata.v1.RecordInput.SourceCase}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getSourceCase = function() {
  return /** @type {proto.provenance.metadata.v1.RecordInput.SourceCase} */(jspb.Message.computeOneofCase(this, proto.provenance.metadata.v1.RecordInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.RecordInput.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.RecordInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.RecordInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.RecordInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordId: msg.getRecordId_asB64(),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    typeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.RecordInput}
 */
proto.provenance.metadata.v1.RecordInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.RecordInput;
  return proto.provenance.metadata.v1.RecordInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.RecordInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.RecordInput}
 */
proto.provenance.metadata.v1.RecordInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecordId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 5:
      var value = /** @type {!proto.provenance.metadata.v1.RecordInputStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.RecordInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.RecordInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.RecordInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.RecordInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes record_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getRecordId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes record_id = 2;
 * This is a type-conversion wrapper around `getRecordId()`
 * @return {string}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getRecordId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecordId()));
};


/**
 * optional bytes record_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecordId()`
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getRecordId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecordId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.setRecordId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.provenance.metadata.v1.RecordInput.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.clearRecordId = function() {
  return jspb.Message.setOneofField(this, 2, proto.provenance.metadata.v1.RecordInput.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.RecordInput.prototype.hasRecordId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.setHash = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.provenance.metadata.v1.RecordInput.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.clearHash = function() {
  return jspb.Message.setOneofField(this, 3, proto.provenance.metadata.v1.RecordInput.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.RecordInput.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string type_name = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.setTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional RecordInputStatus status = 5;
 * @return {!proto.provenance.metadata.v1.RecordInputStatus}
 */
proto.provenance.metadata.v1.RecordInput.prototype.getStatus = function() {
  return /** @type {!proto.provenance.metadata.v1.RecordInputStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.RecordInputStatus} value
 * @return {!proto.provenance.metadata.v1.RecordInput} returns this
 */
proto.provenance.metadata.v1.RecordInput.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.RecordOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.RecordOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.RecordOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.RecordOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.RecordOutput}
 */
proto.provenance.metadata.v1.RecordOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.RecordOutput;
  return proto.provenance.metadata.v1.RecordOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.RecordOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.RecordOutput}
 */
proto.provenance.metadata.v1.RecordOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!proto.provenance.metadata.v1.ResultStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.RecordOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.RecordOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.RecordOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.RecordOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.RecordOutput.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.RecordOutput} returns this
 */
proto.provenance.metadata.v1.RecordOutput.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResultStatus status = 2;
 * @return {!proto.provenance.metadata.v1.ResultStatus}
 */
proto.provenance.metadata.v1.RecordOutput.prototype.getStatus = function() {
  return /** @type {!proto.provenance.metadata.v1.ResultStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.ResultStatus} value
 * @return {!proto.provenance.metadata.v1.RecordOutput} returns this
 */
proto.provenance.metadata.v1.RecordOutput.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.Party.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.Party.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.Party} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Party.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    optional: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.Party}
 */
proto.provenance.metadata.v1.Party.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.Party;
  return proto.provenance.metadata.v1.Party.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.Party} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.Party}
 */
proto.provenance.metadata.v1.Party.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!proto.provenance.metadata.v1.PartyType} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.Party.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.Party.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.Party} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.Party.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOptional();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.provenance.metadata.v1.Party.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.Party} returns this
 */
proto.provenance.metadata.v1.Party.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PartyType role = 2;
 * @return {!proto.provenance.metadata.v1.PartyType}
 */
proto.provenance.metadata.v1.Party.prototype.getRole = function() {
  return /** @type {!proto.provenance.metadata.v1.PartyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.provenance.metadata.v1.PartyType} value
 * @return {!proto.provenance.metadata.v1.Party} returns this
 */
proto.provenance.metadata.v1.Party.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool optional = 3;
 * @return {boolean}
 */
proto.provenance.metadata.v1.Party.prototype.getOptional = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.provenance.metadata.v1.Party} returns this
 */
proto.provenance.metadata.v1.Party.prototype.setOptional = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.AuditFields.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.AuditFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.AuditFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.AuditFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedDate: (f = msg.getUpdatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0),
    message: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.AuditFields}
 */
proto.provenance.metadata.v1.AuditFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.AuditFields;
  return proto.provenance.metadata.v1.AuditFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.AuditFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.AuditFields}
 */
proto.provenance.metadata.v1.AuditFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.AuditFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.AuditFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.AuditFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.AuditFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
*/
proto.provenance.metadata.v1.AuditFields.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.AuditFields.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string created_by = 2;
 * @return {string}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp updated_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getUpdatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
*/
proto.provenance.metadata.v1.AuditFields.prototype.setUpdatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.clearUpdatedDate = function() {
  return this.setUpdatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.AuditFields.prototype.hasUpdatedDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string updated_by = 4;
 * @return {string}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 version = 5;
 * @return {number}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string message = 6;
 * @return {string}
 */
proto.provenance.metadata.v1.AuditFields.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.metadata.v1.AuditFields} returns this
 */
proto.provenance.metadata.v1.AuditFields.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.metadata.v1.NetAssetValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.metadata.v1.NetAssetValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.NetAssetValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: (f = msg.getPrice()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    updatedBlockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.metadata.v1.NetAssetValue}
 */
proto.provenance.metadata.v1.NetAssetValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.metadata.v1.NetAssetValue;
  return proto.provenance.metadata.v1.NetAssetValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.metadata.v1.NetAssetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.metadata.v1.NetAssetValue}
 */
proto.provenance.metadata.v1.NetAssetValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedBlockHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.metadata.v1.NetAssetValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.metadata.v1.NetAssetValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.metadata.v1.NetAssetValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin price = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.getPrice = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.provenance.metadata.v1.NetAssetValue} returns this
*/
proto.provenance.metadata.v1.NetAssetValue.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.metadata.v1.NetAssetValue} returns this
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 updated_block_height = 2;
 * @return {number}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.getUpdatedBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.NetAssetValue} returns this
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.setUpdatedBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 volume = 3;
 * @return {number}
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.metadata.v1.NetAssetValue} returns this
 */
proto.provenance.metadata.v1.NetAssetValue.prototype.setVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.provenance.metadata.v1.RecordInputStatus = {
  RECORD_INPUT_STATUS_UNSPECIFIED: 0,
  RECORD_INPUT_STATUS_PROPOSED: 1,
  RECORD_INPUT_STATUS_RECORD: 2
};

/**
 * @enum {number}
 */
proto.provenance.metadata.v1.ResultStatus = {
  RESULT_STATUS_UNSPECIFIED: 0,
  RESULT_STATUS_PASS: 1,
  RESULT_STATUS_SKIP: 2,
  RESULT_STATUS_FAIL: 3
};

goog.object.extend(exports, proto.provenance.metadata.v1);
