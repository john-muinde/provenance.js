// source: provenance/msgfees/v1/msgfees.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
goog.exportSymbol('proto.provenance.msgfees.v1.EventMsgFee', null, global);
goog.exportSymbol('proto.provenance.msgfees.v1.EventMsgFees', null, global);
goog.exportSymbol('proto.provenance.msgfees.v1.MsgFee', null, global);
goog.exportSymbol('proto.provenance.msgfees.v1.Params', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.msgfees.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.msgfees.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.msgfees.v1.Params.displayName = 'proto.provenance.msgfees.v1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.msgfees.v1.MsgFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.msgfees.v1.MsgFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.msgfees.v1.MsgFee.displayName = 'proto.provenance.msgfees.v1.MsgFee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.msgfees.v1.EventMsgFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.provenance.msgfees.v1.EventMsgFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.msgfees.v1.EventMsgFee.displayName = 'proto.provenance.msgfees.v1.EventMsgFee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.provenance.msgfees.v1.EventMsgFees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.provenance.msgfees.v1.EventMsgFees.repeatedFields_, null);
};
goog.inherits(proto.provenance.msgfees.v1.EventMsgFees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.provenance.msgfees.v1.EventMsgFees.displayName = 'proto.provenance.msgfees.v1.EventMsgFees';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.msgfees.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.msgfees.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.msgfees.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    floorGasPrice: (f = msg.getFloorGasPrice()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    nhashPerUsdMil: jspb.Message.getFieldWithDefault(msg, 3, 0),
    conversionFeeDenom: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.msgfees.v1.Params}
 */
proto.provenance.msgfees.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.msgfees.v1.Params;
  return proto.provenance.msgfees.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.msgfees.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.msgfees.v1.Params}
 */
proto.provenance.msgfees.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setFloorGasPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNhashPerUsdMil(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversionFeeDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.msgfees.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.msgfees.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.msgfees.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFloorGasPrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getNhashPerUsdMil();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getConversionFeeDenom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin floor_gas_price = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.provenance.msgfees.v1.Params.prototype.getFloorGasPrice = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.provenance.msgfees.v1.Params} returns this
*/
proto.provenance.msgfees.v1.Params.prototype.setFloorGasPrice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.msgfees.v1.Params} returns this
 */
proto.provenance.msgfees.v1.Params.prototype.clearFloorGasPrice = function() {
  return this.setFloorGasPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.msgfees.v1.Params.prototype.hasFloorGasPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 nhash_per_usd_mil = 3;
 * @return {number}
 */
proto.provenance.msgfees.v1.Params.prototype.getNhashPerUsdMil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.msgfees.v1.Params} returns this
 */
proto.provenance.msgfees.v1.Params.prototype.setNhashPerUsdMil = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string conversion_fee_denom = 4;
 * @return {string}
 */
proto.provenance.msgfees.v1.Params.prototype.getConversionFeeDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.Params} returns this
 */
proto.provenance.msgfees.v1.Params.prototype.setConversionFeeDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.msgfees.v1.MsgFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.msgfees.v1.MsgFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.MsgFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgTypeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    additionalFee: (f = msg.getAdditionalFee()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    recipient: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipientBasisPoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.msgfees.v1.MsgFee}
 */
proto.provenance.msgfees.v1.MsgFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.msgfees.v1.MsgFee;
  return proto.provenance.msgfees.v1.MsgFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.msgfees.v1.MsgFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.msgfees.v1.MsgFee}
 */
proto.provenance.msgfees.v1.MsgFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgTypeUrl(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAdditionalFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecipientBasisPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.msgfees.v1.MsgFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.msgfees.v1.MsgFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.MsgFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdditionalFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipientBasisPoints();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string msg_type_url = 1;
 * @return {string}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.getMsgTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.MsgFee} returns this
 */
proto.provenance.msgfees.v1.MsgFee.prototype.setMsgTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional cosmos.base.v1beta1.Coin additional_fee = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.getAdditionalFee = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.provenance.msgfees.v1.MsgFee} returns this
*/
proto.provenance.msgfees.v1.MsgFee.prototype.setAdditionalFee = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.provenance.msgfees.v1.MsgFee} returns this
 */
proto.provenance.msgfees.v1.MsgFee.prototype.clearAdditionalFee = function() {
  return this.setAdditionalFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.hasAdditionalFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string recipient = 3;
 * @return {string}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.MsgFee} returns this
 */
proto.provenance.msgfees.v1.MsgFee.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 recipient_basis_points = 4;
 * @return {number}
 */
proto.provenance.msgfees.v1.MsgFee.prototype.getRecipientBasisPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.provenance.msgfees.v1.MsgFee} returns this
 */
proto.provenance.msgfees.v1.MsgFee.prototype.setRecipientBasisPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.msgfees.v1.EventMsgFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.msgfees.v1.EventMsgFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.EventMsgFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, ""),
    total: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.msgfees.v1.EventMsgFee}
 */
proto.provenance.msgfees.v1.EventMsgFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.msgfees.v1.EventMsgFee;
  return proto.provenance.msgfees.v1.EventMsgFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.msgfees.v1.EventMsgFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.msgfees.v1.EventMsgFee}
 */
proto.provenance.msgfees.v1.EventMsgFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.msgfees.v1.EventMsgFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.msgfees.v1.EventMsgFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.EventMsgFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string msg_type = 1;
 * @return {string}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.getMsgType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.EventMsgFee} returns this
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string count = 2;
 * @return {string}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.getCount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.EventMsgFee} returns this
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.setCount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string total = 3;
 * @return {string}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.getTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.EventMsgFee} returns this
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.setTotal = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recipient = 4;
 * @return {string}
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.provenance.msgfees.v1.EventMsgFee} returns this
 */
proto.provenance.msgfees.v1.EventMsgFee.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.provenance.msgfees.v1.EventMsgFees.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.provenance.msgfees.v1.EventMsgFees.prototype.toObject = function(opt_includeInstance) {
  return proto.provenance.msgfees.v1.EventMsgFees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.provenance.msgfees.v1.EventMsgFees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.EventMsgFees.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgFeesList: jspb.Message.toObjectList(msg.getMsgFeesList(),
    proto.provenance.msgfees.v1.EventMsgFee.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.provenance.msgfees.v1.EventMsgFees}
 */
proto.provenance.msgfees.v1.EventMsgFees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.provenance.msgfees.v1.EventMsgFees;
  return proto.provenance.msgfees.v1.EventMsgFees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.provenance.msgfees.v1.EventMsgFees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.provenance.msgfees.v1.EventMsgFees}
 */
proto.provenance.msgfees.v1.EventMsgFees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.provenance.msgfees.v1.EventMsgFee;
      reader.readMessage(value,proto.provenance.msgfees.v1.EventMsgFee.deserializeBinaryFromReader);
      msg.addMsgFees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.provenance.msgfees.v1.EventMsgFees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.provenance.msgfees.v1.EventMsgFees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.provenance.msgfees.v1.EventMsgFees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.provenance.msgfees.v1.EventMsgFees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgFeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.provenance.msgfees.v1.EventMsgFee.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EventMsgFee msg_fees = 1;
 * @return {!Array<!proto.provenance.msgfees.v1.EventMsgFee>}
 */
proto.provenance.msgfees.v1.EventMsgFees.prototype.getMsgFeesList = function() {
  return /** @type{!Array<!proto.provenance.msgfees.v1.EventMsgFee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.provenance.msgfees.v1.EventMsgFee, 1));
};


/**
 * @param {!Array<!proto.provenance.msgfees.v1.EventMsgFee>} value
 * @return {!proto.provenance.msgfees.v1.EventMsgFees} returns this
*/
proto.provenance.msgfees.v1.EventMsgFees.prototype.setMsgFeesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.provenance.msgfees.v1.EventMsgFee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.provenance.msgfees.v1.EventMsgFee}
 */
proto.provenance.msgfees.v1.EventMsgFees.prototype.addMsgFees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.provenance.msgfees.v1.EventMsgFee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.provenance.msgfees.v1.EventMsgFees} returns this
 */
proto.provenance.msgfees.v1.EventMsgFees.prototype.clearMsgFeesList = function() {
  return this.setMsgFeesList([]);
};


goog.object.extend(exports, proto.provenance.msgfees.v1);
