// source: ibc/applications/transfer/v1/authz.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var cosmos_proto_cosmos_pb = require('../../../../cosmos_proto/cosmos_pb.js');
goog.object.extend(proto, cosmos_proto_cosmos_pb);
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var ibc_applications_transfer_v1_transfer_pb = require('../../../../ibc/applications/transfer/v1/transfer_pb.js');
goog.object.extend(proto, ibc_applications_transfer_v1_transfer_pb);
goog.exportSymbol('proto.ibc.applications.transfer.v1.Allocation', null, global);
goog.exportSymbol('proto.ibc.applications.transfer.v1.AllowedForwarding', null, global);
goog.exportSymbol('proto.ibc.applications.transfer.v1.TransferAuthorization', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.transfer.v1.Allocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.applications.transfer.v1.Allocation.repeatedFields_, null);
};
goog.inherits(proto.ibc.applications.transfer.v1.Allocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.transfer.v1.Allocation.displayName = 'proto.ibc.applications.transfer.v1.Allocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.transfer.v1.AllowedForwarding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.applications.transfer.v1.AllowedForwarding.repeatedFields_, null);
};
goog.inherits(proto.ibc.applications.transfer.v1.AllowedForwarding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.transfer.v1.AllowedForwarding.displayName = 'proto.ibc.applications.transfer.v1.AllowedForwarding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.transfer.v1.TransferAuthorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.applications.transfer.v1.TransferAuthorization.repeatedFields_, null);
};
goog.inherits(proto.ibc.applications.transfer.v1.TransferAuthorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.transfer.v1.TransferAuthorization.displayName = 'proto.ibc.applications.transfer.v1.TransferAuthorization';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.applications.transfer.v1.Allocation.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.applications.transfer.v1.Allocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.applications.transfer.v1.Allocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.Allocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceChannel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spendLimitList: jspb.Message.toObjectList(msg.getSpendLimitList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance),
    allowListList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    allowedPacketDataList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    allowedForwardingList: jspb.Message.toObjectList(msg.getAllowedForwardingList(),
    proto.ibc.applications.transfer.v1.AllowedForwarding.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.transfer.v1.Allocation}
 */
proto.ibc.applications.transfer.v1.Allocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.applications.transfer.v1.Allocation;
  return proto.ibc.applications.transfer.v1.Allocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.transfer.v1.Allocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.transfer.v1.Allocation}
 */
proto.ibc.applications.transfer.v1.Allocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChannel(value);
      break;
    case 3:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addSpendLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedPacketData(value);
      break;
    case 6:
      var value = new proto.ibc.applications.transfer.v1.AllowedForwarding;
      reader.readMessage(value,proto.ibc.applications.transfer.v1.AllowedForwarding.deserializeBinaryFromReader);
      msg.addAllowedForwarding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.applications.transfer.v1.Allocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.transfer.v1.Allocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.Allocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePort();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceChannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpendLimitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getAllowListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getAllowedPacketDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAllowedForwardingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ibc.applications.transfer.v1.AllowedForwarding.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_port = 1;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getSourcePort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.setSourcePort = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_channel = 2;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.setSourceChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin spend_limit = 3;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getSpendLimitList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 3));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
*/
proto.ibc.applications.transfer.v1.Allocation.prototype.setSpendLimitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.addSpendLimit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.clearSpendLimitList = function() {
  return this.setSpendLimitList([]);
};


/**
 * repeated string allow_list = 4;
 * @return {!Array<string>}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getAllowListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.setAllowListList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.addAllowList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.clearAllowListList = function() {
  return this.setAllowListList([]);
};


/**
 * repeated string allowed_packet_data = 5;
 * @return {!Array<string>}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getAllowedPacketDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.setAllowedPacketDataList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.addAllowedPacketData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.clearAllowedPacketDataList = function() {
  return this.setAllowedPacketDataList([]);
};


/**
 * repeated AllowedForwarding allowed_forwarding = 6;
 * @return {!Array<!proto.ibc.applications.transfer.v1.AllowedForwarding>}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.getAllowedForwardingList = function() {
  return /** @type{!Array<!proto.ibc.applications.transfer.v1.AllowedForwarding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.applications.transfer.v1.AllowedForwarding, 6));
};


/**
 * @param {!Array<!proto.ibc.applications.transfer.v1.AllowedForwarding>} value
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
*/
proto.ibc.applications.transfer.v1.Allocation.prototype.setAllowedForwardingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ibc.applications.transfer.v1.AllowedForwarding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.transfer.v1.AllowedForwarding}
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.addAllowedForwarding = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ibc.applications.transfer.v1.AllowedForwarding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.Allocation} returns this
 */
proto.ibc.applications.transfer.v1.Allocation.prototype.clearAllowedForwardingList = function() {
  return this.setAllowedForwardingList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.applications.transfer.v1.AllowedForwarding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.applications.transfer.v1.AllowedForwarding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.toObject = function(includeInstance, msg) {
  var f, obj = {
    hopsList: jspb.Message.toObjectList(msg.getHopsList(),
    ibc_applications_transfer_v1_transfer_pb.Hop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.transfer.v1.AllowedForwarding}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.applications.transfer.v1.AllowedForwarding;
  return proto.ibc.applications.transfer.v1.AllowedForwarding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.transfer.v1.AllowedForwarding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.transfer.v1.AllowedForwarding}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_applications_transfer_v1_transfer_pb.Hop;
      reader.readMessage(value,ibc_applications_transfer_v1_transfer_pb.Hop.deserializeBinaryFromReader);
      msg.addHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.applications.transfer.v1.AllowedForwarding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.transfer.v1.AllowedForwarding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      ibc_applications_transfer_v1_transfer_pb.Hop.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Hop hops = 1;
 * @return {!Array<!proto.ibc.applications.transfer.v1.Hop>}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.getHopsList = function() {
  return /** @type{!Array<!proto.ibc.applications.transfer.v1.Hop>} */ (
    jspb.Message.getRepeatedWrapperField(this, ibc_applications_transfer_v1_transfer_pb.Hop, 1));
};


/**
 * @param {!Array<!proto.ibc.applications.transfer.v1.Hop>} value
 * @return {!proto.ibc.applications.transfer.v1.AllowedForwarding} returns this
*/
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.setHopsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ibc.applications.transfer.v1.Hop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.transfer.v1.Hop}
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.addHops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ibc.applications.transfer.v1.Hop, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.AllowedForwarding} returns this
 */
proto.ibc.applications.transfer.v1.AllowedForwarding.prototype.clearHopsList = function() {
  return this.setHopsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.applications.transfer.v1.TransferAuthorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.applications.transfer.v1.TransferAuthorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    allocationsList: jspb.Message.toObjectList(msg.getAllocationsList(),
    proto.ibc.applications.transfer.v1.Allocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.transfer.v1.TransferAuthorization}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.applications.transfer.v1.TransferAuthorization;
  return proto.ibc.applications.transfer.v1.TransferAuthorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.transfer.v1.TransferAuthorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.transfer.v1.TransferAuthorization}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ibc.applications.transfer.v1.Allocation;
      reader.readMessage(value,proto.ibc.applications.transfer.v1.Allocation.deserializeBinaryFromReader);
      msg.addAllocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.applications.transfer.v1.TransferAuthorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.transfer.v1.TransferAuthorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ibc.applications.transfer.v1.Allocation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Allocation allocations = 1;
 * @return {!Array<!proto.ibc.applications.transfer.v1.Allocation>}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.getAllocationsList = function() {
  return /** @type{!Array<!proto.ibc.applications.transfer.v1.Allocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.applications.transfer.v1.Allocation, 1));
};


/**
 * @param {!Array<!proto.ibc.applications.transfer.v1.Allocation>} value
 * @return {!proto.ibc.applications.transfer.v1.TransferAuthorization} returns this
*/
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.setAllocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ibc.applications.transfer.v1.Allocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.transfer.v1.Allocation}
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.addAllocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ibc.applications.transfer.v1.Allocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.transfer.v1.TransferAuthorization} returns this
 */
proto.ibc.applications.transfer.v1.TransferAuthorization.prototype.clearAllocationsList = function() {
  return this.setAllocationsList([]);
};


goog.object.extend(exports, proto.ibc.applications.transfer.v1);
